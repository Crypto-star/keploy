// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mongo "go.keploy.io/server/v2/pkg/core/proxy/integrations/mongo"
	wiremessage "go.mongodb.org/mongo-driver/x/mongo/driver/wiremessage"
)

// Operation is an autogenerated mock type for the Operation type
type Operation struct {
	mock.Mock
}

// CommandAndCollection provides a mock function with no fields
func (_m *Operation) CommandAndCollection() (mongo.Command, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CommandAndCollection")
	}

	var r0 mongo.Command
	var r1 string
	if rf, ok := ret.Get(0).(func() (mongo.Command, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() mongo.Command); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mongo.Command)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// CursorID provides a mock function with no fields
func (_m *Operation) CursorID() (int64, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CursorID")
	}

	var r0 int64
	var r1 bool
	if rf, ok := ret.Get(0).(func() (int64, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Encode provides a mock function with given fields: responseTo, requestID
func (_m *Operation) Encode(responseTo int32, requestID int32) []byte {
	ret := _m.Called(responseTo, requestID)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(int32, int32) []byte); ok {
		r0 = rf(responseTo, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Error provides a mock function with no fields
func (_m *Operation) Error() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsIsAdminDB provides a mock function with no fields
func (_m *Operation) IsIsAdminDB() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsIsAdminDB")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsIsMaster provides a mock function with no fields
func (_m *Operation) IsIsMaster() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsIsMaster")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OpCode provides a mock function with no fields
func (_m *Operation) OpCode() wiremessage.OpCode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OpCode")
	}

	var r0 wiremessage.OpCode
	if rf, ok := ret.Get(0).(func() wiremessage.OpCode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(wiremessage.OpCode)
	}

	return r0
}

// RequestID provides a mock function with no fields
func (_m *Operation) RequestID() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RequestID")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// String provides a mock function with no fields
func (_m *Operation) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TransactionDetails provides a mock function with no fields
func (_m *Operation) TransactionDetails() *mongo.TransactionDetails {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransactionDetails")
	}

	var r0 *mongo.TransactionDetails
	if rf, ok := ret.Get(0).(func() *mongo.TransactionDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.TransactionDetails)
		}
	}

	return r0
}

// Unacknowledged provides a mock function with no fields
func (_m *Operation) Unacknowledged() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unacknowledged")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewOperation creates a new instance of Operation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperation(t interface {
	mock.TestingT
	Cleanup(func())
}) *Operation {
	mock := &Operation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
