// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "go.keploy.io/server/v2/pkg/models"
)

// MockMemDb is an autogenerated mock type for the MockMemDb type
type MockMemDb struct {
	mock.Mock
}

// DeleteFilteredMock provides a mock function with given fields: _a0
func (_m *MockMemDb) DeleteFilteredMock(_a0 models.Mock) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilteredMock")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(models.Mock) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteUnFilteredMock provides a mock function with given fields: _a0
func (_m *MockMemDb) DeleteUnFilteredMock(_a0 models.Mock) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUnFilteredMock")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(models.Mock) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FlagMockAsUsed provides a mock function with given fields: _a0
func (_m *MockMemDb) FlagMockAsUsed(_a0 models.Mock) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FlagMockAsUsed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Mock) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFilteredMocks provides a mock function with no fields
func (_m *MockMemDb) GetFilteredMocks() ([]*models.Mock, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFilteredMocks")
	}

	var r0 []*models.Mock
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Mock, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Mock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Mock)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnFilteredMocks provides a mock function with no fields
func (_m *MockMemDb) GetUnFilteredMocks() ([]*models.Mock, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUnFilteredMocks")
	}

	var r0 []*models.Mock
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Mock, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Mock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Mock)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUnFilteredMock provides a mock function with given fields: old, new
func (_m *MockMemDb) UpdateUnFilteredMock(old *models.Mock, new *models.Mock) bool {
	ret := _m.Called(old, new)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUnFilteredMock")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*models.Mock, *models.Mock) bool); ok {
		r0 = rf(old, new)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockMemDb creates a new instance of MockMemDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMemDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMemDb {
	mock := &MockMemDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
