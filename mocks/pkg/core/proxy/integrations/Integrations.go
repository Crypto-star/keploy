// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	integrations "go.keploy.io/server/v2/pkg/core/proxy/integrations"

	models "go.keploy.io/server/v2/pkg/models"

	net "net"
)

// Integrations is an autogenerated mock type for the Integrations type
type Integrations struct {
	mock.Mock
}

// MatchType provides a mock function with given fields: ctx, reqBuf
func (_m *Integrations) MatchType(ctx context.Context, reqBuf []byte) bool {
	ret := _m.Called(ctx, reqBuf)

	if len(ret) == 0 {
		panic("no return value specified for MatchType")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, []byte) bool); ok {
		r0 = rf(ctx, reqBuf)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockOutgoing provides a mock function with given fields: ctx, src, dstCfg, mockDb, opts
func (_m *Integrations) MockOutgoing(ctx context.Context, src net.Conn, dstCfg *models.ConditionalDstCfg, mockDb integrations.MockMemDb, opts models.OutgoingOptions) error {
	ret := _m.Called(ctx, src, dstCfg, mockDb, opts)

	if len(ret) == 0 {
		panic("no return value specified for MockOutgoing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, net.Conn, *models.ConditionalDstCfg, integrations.MockMemDb, models.OutgoingOptions) error); ok {
		r0 = rf(ctx, src, dstCfg, mockDb, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordOutgoing provides a mock function with given fields: ctx, src, dst, _a3, opts
func (_m *Integrations) RecordOutgoing(ctx context.Context, src net.Conn, dst net.Conn, _a3 chan<- *models.Mock, opts models.OutgoingOptions) error {
	ret := _m.Called(ctx, src, dst, _a3, opts)

	if len(ret) == 0 {
		panic("no return value specified for RecordOutgoing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, net.Conn, net.Conn, chan<- *models.Mock, models.OutgoingOptions) error); ok {
		r0 = rf(ctx, src, dst, _a3, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIntegrations creates a new instance of Integrations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrations(t interface {
	mock.TestingT
	Cleanup(func())
}) *Integrations {
	mock := &Integrations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
