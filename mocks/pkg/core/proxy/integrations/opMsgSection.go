// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mongo "go.keploy.io/server/v2/pkg/core/proxy/integrations/mongo"
)

// opMsgSection is an autogenerated mock type for the opMsgSection type
type opMsgSection struct {
	mock.Mock
}

// String provides a mock function with no fields
func (_m *opMsgSection) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// append provides a mock function with given fields: buffer
func (_m *opMsgSection) append(buffer []byte) []byte {
	ret := _m.Called(buffer)

	if len(ret) == 0 {
		panic("no return value specified for append")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(buffer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// commandAndCollection provides a mock function with no fields
func (_m *opMsgSection) commandAndCollection() (mongo.Command, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for commandAndCollection")
	}

	var r0 mongo.Command
	var r1 string
	if rf, ok := ret.Get(0).(func() (mongo.Command, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() mongo.Command); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mongo.Command)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// cursorID provides a mock function with no fields
func (_m *opMsgSection) cursorID() (int64, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for cursorID")
	}

	var r0 int64
	var r1 bool
	if rf, ok := ret.Get(0).(func() (int64, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// isDbAdmin provides a mock function with no fields
func (_m *opMsgSection) isDbAdmin() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for isDbAdmin")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// isIsMaster provides a mock function with no fields
func (_m *opMsgSection) isIsMaster() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for isIsMaster")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// newOpMsgSection creates a new instance of opMsgSection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newOpMsgSection(t interface {
	mock.TestingT
	Cleanup(func())
}) *opMsgSection {
	mock := &opMsgSection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
