// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	integrations "go.keploy.io/server/v2/pkg/core/proxy/integrations"

	zap "go.uber.org/zap"
)

// Initializer is an autogenerated mock type for the Initializer type
type Initializer struct {
	mock.Mock
}

// Execute provides a mock function with given fields: logger
func (_m *Initializer) Execute(logger *zap.Logger) integrations.Integrations {
	ret := _m.Called(logger)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 integrations.Integrations
	if rf, ok := ret.Get(0).(func(*zap.Logger) integrations.Integrations); ok {
		r0 = rf(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(integrations.Integrations)
		}
	}

	return r0
}

// NewInitializer creates a new instance of Initializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInitializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Initializer {
	mock := &Initializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
